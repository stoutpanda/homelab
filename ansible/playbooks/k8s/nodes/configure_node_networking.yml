---
# configure_node_networking_fixed.yml
- name: Configure networking for Kubernetes nodes
  hosts: k8s_cluster
  become: true
  gather_facts: true

  tasks:
    - name: Set hostname
      hostname:
        name: "{{ inventory_hostname }}"

    - name: Update /etc/hosts with node's own entry
      lineinfile:
        path: /etc/hosts
        line: "127.0.1.1 {{ inventory_hostname }}"
        regexp: "^127.0.1.1"
        state: present

    - name: Set node type facts
      set_fact:
        is_control_plane: "{{ inventory_hostname in groups['control_plane_nodes'] }}"
        is_worker: "{{ inventory_hostname in groups['worker_nodes'] }}"
        is_raspberry_pi: "{{ inventory_hostname in groups['raspberry_pis'] }}"
        is_ms01: "{{ inventory_hostname in groups['ms-01s'] }}"
        
    - name: Debug node type detection
      debug:
        msg: |
          Node types for {{ inventory_hostname }}:
          Control plane: {{ is_control_plane }}
          Worker: {{ is_worker }}
          Raspberry Pi: {{ is_raspberry_pi }}
          MS-01: {{ is_ms01 }}

    # Use simpler approach for MS-01 nodes
    - name: Set default interface names for MS-01 nodes
      set_fact:
        mgmt_if: "enp87s0"
        second_if: "enp88s0"
        sfp_ifs: ["enp1s0f0", "enp1s0f1"]
      when: is_ms01 | bool

    # Create netplan for Raspberry Pi nodes
    - name: Create netplan configuration for Raspberry Pi nodes
      copy:
        dest: /etc/netplan/60-k8s-network.yaml
        content: |
          network:
            version: 2
            renderer: networkd
            ethernets:
              eth0:
                dhcp4: no
                addresses:
                  - {{ hostvars[inventory_hostname]['ansible_host'] }}{{ control_subnet_mask }}  # Control plane IP
                routes:
                  - to: default
                    via: {{ control_plane_gateway }}
                nameservers:
                  addresses: [{{ control_plane_gateway }}, 1.1.1.1, 1.0.0.1]  # UDM-Pro first, then Cloudflare
        mode: '0640'
      register: netplan_config_rpi
      when: is_raspberry_pi

    # Create netplan for MS-01 worker nodes with fixed indentation
    - name: Create netplan configuration for MS-01 worker nodes
      copy:
        dest: /etc/netplan/60-k8s-network.yaml
        content: |
          network:
            version: 2
            renderer: networkd
            ethernets:
              {{ mgmt_if }}:
                dhcp4: no
                addresses:
                  - 10.8.16.{{ hostvars[inventory_hostname]['ansible_host'] | regex_replace('^.*\\.', '') }}{{ mgmt_subnet_mask }}  # Management IP
                  - {{ hostvars[inventory_hostname]['ansible_host'] }}{{ control_subnet_mask }}  # Control plane IP
                routes:
                  - to: default
                    via: {{ admin_gateway }}
                nameservers:
                  addresses: [{{ admin_gateway }}, 1.1.1.1]
              {{ second_if }}:
                dhcp4: no
                optional: true
              {% for interface in sfp_ifs %}
              {{ interface }}:
                dhcp4: no
                optional: true
                mtu: 9000
                addresses:
                  - 10.8.28.{{ hostvars[inventory_hostname]['ansible_host'] | regex_replace('^.*\\.', '') }}{{ pod_subnet_mask }}  # Pod network
                  - 10.8.38.{{ hostvars[inventory_hostname]['ansible_host'] | regex_replace('^.*\\.', '') }}{{ service_subnet_mask }}  # Service network
                  - 10.8.48.{{ hostvars[inventory_hostname]['ansible_host'] | regex_replace('^.*\\.', '') }}{{ storage_subnet_mask }}  # Storage network
              {% endfor %}
        mode: '0640'
      register: netplan_config_ms01
      when: is_ms01

    # Add hosts entries for all nodes
    - name: Add K8s cluster hosts to /etc/hosts
      blockinfile:
        path: /etc/hosts
        block: |
          # Gateways
          {{ control_plane_gateway }} control-pane-gateway
          {{ admin_gateway }} admin-network-gateway

          # Control plane nodes
          10.8.18.86 k8s-cp-01
          10.8.18.87 k8s-cp-02
          10.8.18.88 k8s-cp-03

          # Worker nodes
          10.8.18.90 k8s-ms01-node-01
          10.8.18.91 k8s-ms01-node-02
          10.8.16.90 k8s-ms01-node-01-mgmt
          10.8.16.91 k8s-ms01-node-02-mgmt

          # Admin node
          10.8.16.85 k8s-admin

          # Virtual IP for HA control plane
          {{ k8s_api_vip }} k8s-apiserver
        marker: "# {mark} KUBERNETES NODES"
        state: present

    # Debug the netplan configuration before applying
    - name: Show generated netplan configuration for debugging
      shell: "cat /etc/netplan/60-k8s-network.yaml"
      register: debug_netplan
      changed_when: false
      when: (netplan_config_rpi is defined and netplan_config_rpi.changed) or (netplan_config_ms01 is defined and netplan_config_ms01.changed)
      
    - name: Display generated netplan
      debug:
        msg: "{{ debug_netplan.stdout_lines }}"
      when: debug_netplan.stdout is defined

    # Apply netplan configuration
    - name: Check netplan syntax
      command: netplan generate
      register: netplan_generate
      changed_when: false
      failed_when: netplan_generate.rc != 0
      when: (netplan_config_rpi is defined and netplan_config_rpi.changed) or (netplan_config_ms01 is defined and netplan_config_ms01.changed)

    - name: Apply netplan configuration if syntax is valid
      command: netplan apply
      when: (netplan_config_rpi is defined and netplan_config_rpi.changed and netplan_generate.rc == 0) or (netplan_config_ms01 is defined and netplan_config_ms01.changed and netplan_generate.rc == 0)

    - name: Wait for network to stabilize
      wait_for_connection:
        delay: 5
        timeout: 60
      when: (netplan_config_rpi is defined and netplan_config_rpi.changed and netplan_generate.rc == 0) or (netplan_config_ms01 is defined and netplan_config_ms01.changed and netplan_generate.rc == 0)

    # Verification steps
    - name: Show effective IP configuration
      shell: "{% if is_raspberry_pi %}ip addr show eth0{% else %}ip -br addr | grep -v lo{% endif %}"
      register: ip_config
      changed_when: false

    - name: Display IP configuration
      debug:
        msg: "{{ ip_config.stdout_lines }}"

    - name: Test DNS resolution
      command: nslookup cloudflare.com
      register: dns_test
      changed_when: false
      failed_when: false

    - name: Display DNS test results
      debug:
        msg: "{{ dns_test.stdout_lines }}"