# safest_network_config.yml
- name: Ultra-safe network configuration for Kubernetes nodes
  hosts: k8s_cluster
  #serial: 1
  become: true
  gather_facts: true

  vars:
    backup_dir: "/root/network_backup_{{ ansible_date_time.iso8601_basic_short }}"
    fallback_file: "/etc/netplan/99-ansible-fallback.yaml"
    timeout_seconds: 90

  tasks:
    # Pre-flight verification
    - name: Verify all required variables are defined
      ansible.builtin.assert:
        that:
          - control_subnet_mask is defined
          - control_plane_gateway is defined
          - admin_gateway is defined
          - mgmt_subnet_mask is defined
          - pod_subnet_mask is defined
          - service_subnet_mask is defined
          - storage_subnet_mask is defined
          - k8s_api_vip is defined
        msg: "Required network variables are missing. Please check group_vars/all.yml or host_vars. Ensure masks are like /24 and gateways are correct for each node type."

    - name: Record initial network state (ip addr, ip route, netplan configs)
      ansible.builtin.shell:
        cmd: |  # CORRECTED STRUCTURE
          echo "=== IP Address Configuration ==="
          ip addr show
          echo "\n=== IP Route Configuration ==="
          ip route show
          echo "\n=== Netplan Configuration Files (*.yaml) ==="
          cat /etc/netplan/*.yaml || echo "No netplan .yaml files found or cat failed."
        warn: false # Parameter for ansible.builtin.shell
      register: initial_network_state
      changed_when: false

    - name: Create backup directory for network configurations
      ansible.builtin.file:
        path: "{{ backup_dir }}"
        state: directory
        mode: '0750'

    - name: Backup current netplan configuration directory
      ansible.builtin.copy:
        src: /etc/netplan/
        dest: "{{ backup_dir }}/netplan_files_backup/"
        remote_src: true
      changed_when: false
      ignore_errors: true

    - name: Create fallback netplan configuration (DHCP on a primary interface)
      ansible.builtin.copy:
        dest: "{{ fallback_file }}"
        content: |
          # Ansible-managed fallback configuration
          network:
            version: 2
            renderer: networkd
            ethernets:
              {% if inventory_hostname in groups['raspberry_pis'] %}
              {{ pi_interface | default('eth0') }}:
                dhcp4: true
                dhcp6: false
              {% else %}
              {{ mgmt_if | default(ansible_default_ipv4.interface) | default('enp87s0') }}:
                dhcp4: true
                dhcp6: false
              {% endif %}
        mode: '0640'

    - name: Set hostname
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"

    - name: Update /etc/hosts with node's own entry (127.0.1.1)
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "127.0.1.1 {{ inventory_hostname }}"
        regexp: "^127\\.0\\.1\\.1\\s+"
        state: present

    # Group membership detection
    - name: Set node type facts
      ansible.builtin.set_fact:
        is_control_plane: inventory_hostname in groups['control_plane_nodes']
        is_worker: inventory_hostname in groups['worker_nodes']
        is_raspberry_pi: inventory_hostname in groups['raspberry_pis']
        is_ms01: inventory_hostname in groups['ms-01s']

    - name: Debug group memberships
      ansible.builtin.debug:
        msg: |
          Node: {{ inventory_hostname }}
          Control Plane: {{ is_control_plane }}
          Worker: {{ is_worker }}
          Raspberry Pi: {{ is_raspberry_pi }}
          MS-01: {{ is_ms01 }}
          Group names: {{ group_names | join(', ') }}

    # Interface detection (Refined for MS-01 logic)
    - name: Determine network interfaces
      block:
        - name: List all non-virtual, non-loopback network interfaces
          ansible.builtin.shell:
            cmd: "ls -1 /sys/class/net/ | grep -Ev '^(lo|docker.*|veth.*|virbr.*|br-.*|bond.*|dummy.*|kube-ipvs.*|ifb.*|tun.*|tap.*)$'" # CORRECTED STRUCTURE
            warn: false # Parameter for ansible.builtin.shell
          register: all_physical_interfaces_raw
          changed_when: false

        - name: Set cleaned list of interfaces
          ansible.builtin.set_fact:
            all_interfaces_list: "{{ all_physical_interfaces_raw.stdout_lines | default([]) }}"

        - name: Display potentially physical interfaces
          ansible.builtin.debug:
            var: all_interfaces_list
            verbosity: 1

        - name: Identify first physical interface for Pi nodes
          ansible.builtin.set_fact:
            pi_interface: "{{ (all_interfaces_list | first) | default('eth0') }}"
          when: is_raspberry_pi

        - name: Identify all ENP interfaces for MS-01 nodes
          ansible.builtin.set_fact:
            all_enp_interfaces_ms01: "{{ all_interfaces_list | select('match', '^enp.*') | list }}"
          when: is_ms01

        - name: Categorize MS-01 ENP interfaces (SFP vs Copper-like)
          ansible.builtin.set_fact:
            potential_sfp_interfaces_ms01: "{{ all_enp_interfaces_ms01 | select('match', '.*f.*') | list }}"
            potential_copper_interfaces_ms01: "{{ all_enp_interfaces_ms01 | reject('match', '.*f.*') | list }}"
          when: is_ms01 and all_enp_interfaces_ms01 is defined

        - name: Assign MS-01 management, secondary, and bond member interfaces
          ansible.builtin.set_fact:
            mgmt_if: "{{ (potential_copper_interfaces_ms01 | first) | default(omit) }}"
            second_if: >-
              {% if mgmt_if is defined and mgmt_if != omit %}
              {{ (potential_copper_interfaces_ms01 | reject('equalto', mgmt_if) | list | first) | default(omit) }}
              {% elif potential_copper_interfaces_ms01 is defined and potential_copper_interfaces_ms01 | length > 1 %}
              {{ (potential_copper_interfaces_ms01 | list)[1] }}
              {% else %}
              {{ omit }}
              {% endif %}
            bond_member_sfp_ifs: "{{ potential_sfp_interfaces_ms01 }}"
          when: is_ms01 and all_enp_interfaces_ms01 is defined

        - name: Assert that essential MS-01 interfaces are found
          ansible.builtin.assert:
            that:
              - mgmt_if is defined and mgmt_if != omit
              - bond_member_sfp_ifs is defined and bond_member_sfp_ifs | length > 0
            msg: "Could not determine a suitable management interface (non-SFP ENP) or SFP bond members for MS-01 node {{ inventory_hostname }}. Check interface naming and detection logic."
          when: is_ms01

        - name: Display final interface assignments
          ansible.builtin.debug:
            msg: |
              Node: {{ inventory_hostname }}
              {% if is_raspberry_pi %}
              Pi Interface: {{ pi_interface | default("N/A") }}
              {% elif is_ms01 %}
              Management Interface (mgmt_if): {{ mgmt_if | default("NOT ASSIGNED") }}
              Secondary Copper Interface (second_if): {{ second_if | default("N/A") }}
              SFP Interfaces for Bond (bond_member_sfp_ifs): {{ bond_member_sfp_ifs | default([]) }}
              All ENP Interfaces Found: {{ all_enp_interfaces_ms01 | default([]) }}
              Identified Copper ENPs: {{ potential_copper_interfaces_ms01 | default([]) }}
              Identified SFP-like ENPs: {{ potential_sfp_interfaces_ms01 | default([]) }}
              {% else %}
              No specific interface logic for this node type.
              {% endif %}
      when: is_raspberry_pi or is_ms01

    # ... (The rest of the playbook remains the same as the previous correct version) ...
    # Tasks like IP Address handling, Netplan creation for Pi and MS-01, /etc/hosts,
    # package installation, apply/verify/rollback logic, etc., are unchanged.
    # Make sure to include them from the last fully reviewed version.

# (Paste the rest of your playbook from the previously confirmed correct version here)
# For example:
    # IP Address handling for MS-01 (using ansible_host for last octet)
    - name: Extract last octet of ansible_host for MS-01 nodes
      ansible.builtin.set_fact:
        last_octet: "{{ hostvars[inventory_hostname]['ansible_host'] | ansible.utils.ipaddr('host') | regex_replace('^.*\\.', '') }}"
      when: is_ms01

    # Create netplan for Raspberry Pi nodes
    - name: Create netplan configuration for Raspberry Pi nodes
      ansible.builtin.copy:
        dest: /etc/netplan/60-k8s-network.yaml
        content: |
          # Ansible-managed Kubernetes network configuration for Raspberry Pi
          network:
            version: 2
            renderer: networkd
            ethernets:
              {{ pi_interface | default('eth0') }}:
                dhcp4: no
                dhcp6: no
                addresses:
                  - {{ hostvars[inventory_hostname]['ansible_host'] }}{{ control_subnet_mask }}
                routes:
                  - to: default
                    via: {{ control_plane_gateway }}
                nameservers:
                  addresses: [{{ control_plane_gateway }}, 1.1.1.1]
        mode: '0640'
      register: netplan_config_rpi
      when: is_raspberry_pi

    # Create netplan for MS-01 worker nodes with proper bond/LAG configuration
    - name: Create netplan configuration for MS-01 worker nodes with LAG
      ansible.builtin.copy:
        dest: /etc/netplan/60-k8s-network.yaml
        content: |
          # Ansible-managed Kubernetes network configuration for MS-01
          network:
            version: 2
            renderer: networkd
            ethernets:
              {% if mgmt_if is defined and mgmt_if != omit %}
              {{ mgmt_if }}:
                dhcp4: no
                dhcp6: no
                addresses:
                  - 10.8.16.{{ last_octet }}/24
                routes:
                  - to: default
                    via: {{ admin_gateway }}
                nameservers:
                  addresses: [{{ admin_gateway }}, 1.1.1.1]
              {% endif %}

              {% if second_if is defined and second_if != omit and second_if != mgmt_if %}
              {{ second_if }}:
                dhcp4: no
                dhcp6: no
                optional: true
              {% endif %}

            {% if bond_member_sfp_ifs is defined and bond_member_sfp_ifs | length > 0 %}
            bonds:
              bond0:
                interfaces:
                  {% for interface in bond_member_sfp_ifs %}
                  - {{ interface }}
                  {% endfor %}
                parameters:
                  mode: 802.3ad
                  lacp-rate: fast
                  mii-monitor-interval: 100
                  transmit-hash-policy: layer2+3
                mtu: 9000
                addresses:
                  - 10.8.28.{{ last_octet }}/23
                  - 10.8.38.{{ last_octet }}/24
                  - 10.8.48.{{ last_octet }}/24
            {% endif %}
        mode: '0640'
      register: netplan_config_ms01
      when: is_ms01 and mgmt_if is defined and mgmt_if != omit

    - name: Add K8s cluster hosts to /etc/hosts
      ansible.builtin.blockinfile:
        path: /etc/hosts
        block: |
          # Gateways
          {{ control_plane_gateway }} control-plane-gateway k8s-cp-gw
          {{ admin_gateway }} admin-network-gateway k8s-admin-gw

          # Control plane nodes
          10.8.18.86 k8s-cp-01
          10.8.18.87 k8s-cp-02
          10.8.18.88 k8s-cp-03

          # Worker nodes
          10.8.18.90 k8s-ms01-node-01
          10.8.18.91 k8s-ms01-node-02
          10.8.16.90 k8s-ms01-node-01-mgmt
          10.8.16.91 k8s-ms01-node-02-mgmt

          # Admin node
          10.8.16.85 k8s-admin

          # Virtual IP for HA control plane
          {{ k8s_api_vip }} k8s-apiserver k8s-api
        marker: "# {mark} KUBERNETES CLUSTER HOSTS (Ansible Managed)"
        state: present

    - name: Ensure required network packages are installed
      ansible.builtin.apt:
        name:
          - ifenslave
          - ethtool
          - bridge-utils
        state: present
      when: is_ms01

    - name: Show generated netplan configuration for debugging
      ansible.builtin.command: cat /etc/netplan/60-k8s-network.yaml
      register: debug_generated_netplan_content
      changed_when: false
      when: (netplan_config_rpi is defined and netplan_config_rpi.changed) or (netplan_config_ms01 is defined and netplan_config_ms01.changed)

    - name: Display generated netplan content
      ansible.builtin.debug:
        var: debug_generated_netplan_content.stdout_lines
      when: debug_generated_netplan_content.stdout is defined and debug_generated_netplan_content.stdout_lines | length > 0

    - name: Check netplan syntax (netplan generate)
      ansible.builtin.command: netplan generate
      register: netplan_generate_result
      changed_when: false
      failed_when: netplan_generate_result.rc != 0
      when: (netplan_config_rpi is defined and netplan_config_rpi.changed) or (netplan_config_ms01 is defined and netplan_config_ms01.changed)

    - name: Apply netplan configuration with rollback script
      ansible.builtin.shell: # The main shell command for applying netplan
        cmd: | # Using cmd: for the multi-line script
          set -e 

          cat > /root/verify_connectivity.sh << 'EOF'
          #!/bin/bash
          sleep {{ timeout_seconds }}
          GATEWAY_TO_PING="{{ admin_gateway if is_ms01 else control_plane_gateway }}"
          echo "INFO: Verifying connectivity to gateway $GATEWAY_TO_PING..."
          if ping -c 3 "$GATEWAY_TO_PING"; then
            echo "INFO: Gateway $GATEWAY_TO_PING is reachable."
          else
            echo "ERROR: Gateway $GATEWAY_TO_PING UNREACHABLE after {{ timeout_seconds }}s!"
            echo "ERROR: Attempting to apply fallback Netplan configuration: {{ fallback_file }}"
            if netplan apply --debug -c {{ fallback_file }}; then
              echo "INFO: Fallback Netplan configuration applied successfully."
            else
              echo "CRITICAL: Failed to apply fallback Netplan configuration. Manual intervention required!"
            fi
          fi
          EOF
          chmod +x /root/verify_connectivity.sh
          echo "INFO: Starting background connectivity verification script."
          nohup /root/verify_connectivity.sh > /var/log/ansible_network_verify.log 2>&1 &
          VERIFY_PID=$!
          echo "INFO: Verification script PID: $VERIFY_PID"
          echo "INFO: Applying main Netplan configuration..."
          if netplan apply --debug; then
            echo "INFO: Main Netplan configuration applied."
          else
            echo "ERROR: netplan apply command FAILED for main configuration."
            echo "ERROR: Attempting to kill verification script (PID $VERIFY_PID)."
            kill $VERIFY_PID 2>/dev/null || echo "WARN: Could not kill verification script $VERIFY_PID."
            if netplan apply --debug -c {{ fallback_file }}; then
               echo "INFO: Fallback configuration applied after main apply failure."
            else
               echo "CRITICAL: Main 'netplan apply' failed AND fallback also failed."
            fi
            exit 1
          fi
        executable: /bin/bash # This is a parameter of the shell module, not under 'args'
        # `warn: false` can be added here if you want to suppress Ansible's own warnings about using shell,
        # but it's usually not needed for this type of well-defined script.
      when: (netplan_config_rpi is defined and netplan_config_rpi.changed and netplan_generate_result.rc == 0) or \
            (netplan_config_ms01 is defined and netplan_config_ms01.changed and netplan_generate_result.rc == 0)
      register: netplan_apply_main_result

    - name: Wait for network to stabilize and connection to re-establish
      ansible.builtin.wait_for_connection:
        delay: 10
        timeout: 60
      when: netplan_apply_main_result is defined and netplan_apply_main_result.changed

    - name: Show effective IP configuration after apply
      ansible.builtin.command: ip addr show
      register: ip_config_after
      changed_when: false
      failed_when: false

    - name: Display IP configuration after apply
      ansible.builtin.debug:
        var: ip_config_after.stdout_lines
        verbosity: 1

    - name: Check routing table after apply
      ansible.builtin.command: ip route show
      register: route_table_after
      changed_when: false
      failed_when: false

    - name: Display routing table after apply
      ansible.builtin.debug:
        var: route_table_after.stdout_lines
        verbosity: 1

    - name: Check bond status (MS-01 only, if bond was configured)
      ansible.builtin.command: cat /proc/net/bonding/bond0
      register: bond_status_after
      changed_when: false
      failed_when: false
      when: is_ms01 and (bond_member_sfp_ifs is defined and bond_member_sfp_ifs | length > 0)

    - name: Display bond status after apply
      ansible.builtin.debug:
        var: bond_status_after.stdout_lines
      when: is_ms01 and bond_status_after.stdout is defined and bond_status_after.stdout_lines | length > 0

    - name: Test ping to primary gateway
      ansible.builtin.command: "ping -c 3 {{ admin_gateway if is_ms01 else control_plane_gateway }}"
      register: ping_gateway_after
      changed_when: false
      failed_when: false

    - name: Display primary gateway ping results
      ansible.builtin.debug:
        msg: "Gateway Ping Exit Code: {{ ping_gateway_after.rc }}\nSTDOUT:\n{{ ping_gateway_after.stdout | default('') }}\nSTDERR:\n{{ ping_gateway_after.stderr | default('') }}"

    - name: Test ping to K8s API VIP
      ansible.builtin.command: "ping -c 3 {{ k8s_api_vip }}"
      register: ping_vip_after
      changed_when: false
      failed_when: false

    - name: Display K8s API VIP ping results
      ansible.builtin.debug:
        msg: "VIP Ping Exit Code: {{ ping_vip_after.rc }}\nSTDOUT:\n{{ ping_vip_after.stdout | default('') }}\nSTDERR:\n{{ ping_vip_after.stderr | default('') }}"
        verbosity: 1

    - name: Test DNS resolution (e.g., cloudflare.com)
      ansible.builtin.command: nslookup cloudflare.com
      register: dns_test_after
      changed_when: false
      failed_when: false

    - name: Display DNS test results
      ansible.builtin.debug:
        var: dns_test_after.stdout_lines
        verbosity: 1

    - name: Verify successful configuration and connectivity
      ansible.builtin.assert:
        that:
          - ping_gateway_after.rc == 0
          - dns_test_after.rc == 0
        success_msg: "Network configuration applied and primary gateway connectivity verified!"
        fail_msg: "WARNING: Network configuration applied, but primary gateway ping or DNS resolution FAILED. Check logs and /var/log/ansible_network_verify.log. Fallback may have been triggered or manual intervention needed."
      ignore_errors: true

    - name: Remove fallback Netplan configuration if connectivity is confirmed
      ansible.builtin.file:
        path: "{{ fallback_file }}"
        state: absent
      when: ping_gateway_after.rc == 0

    - name: Remove connectivity verification script if successful
      ansible.builtin.file:
        path: /root/verify_connectivity.sh
        state: absent
      when: ping_gateway_after.rc == 0
