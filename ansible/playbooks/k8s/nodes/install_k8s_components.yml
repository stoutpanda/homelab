---
# install_k8s_components.yml - UPDATED for latest Kubernetes versions
- name: Install Kubernetes components (kubeadm, kubelet, kubectl)
  hosts: control_plane_nodes
  become: true
  gather_facts: true
  
  tasks:
    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg
        state: present
        update_cache: yes
      
    - name: Create keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      
    - name: Extract minor version from kubernetes_version variable
      set_fact:
        k8s_minor_version: "{{ kubernetes_version.split('.')[0] }}.{{ kubernetes_version.split('.')[1] }}"
      
    - name: Display version information
      debug:
        msg:
          - "Full Kubernetes version: {{ kubernetes_version }}"
          - "Minor version for repository: {{ k8s_minor_version }}"
      
    - name: Download Kubernetes GPG key
      shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/{{ k8s_minor_version }}/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      
    - name: Add Kubernetes repository
      apt_repository:
        repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ k8s_minor_version }}/deb/ /
        state: present
        filename: kubernetes
      
    - name: Update apt cache after adding repository
      apt:
        update_cache: yes
      
    - name: Check available Kubernetes versions
      shell: apt-cache madison kubelet | grep {{ kubernetes_version.lstrip('v') }}
      register: available_versions
      failed_when: false
      changed_when: false
      
    - name: Display available versions
      debug:
        msg: "{{ available_versions.stdout_lines }}"
      when: available_versions.stdout_lines | length > 0
      
    - name: Install specific Kubernetes version if available
      apt:
        name:
          - kubelet={{ kubernetes_version.lstrip('v') }}-1.1
          - kubeadm={{ kubernetes_version.lstrip('v') }}-1.1
          - kubectl={{ kubernetes_version.lstrip('v') }}-1.1
        state: present
      when: available_versions.rc == 0
      register: specific_version_install
      
    - name: Install latest available Kubernetes components if specific version not found
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
      when: available_versions.rc != 0
      register: latest_version_install
      
    - name: Hold kubelet package version
      dpkg_selections:
        name: kubelet
        selection: hold
      
    - name: Hold kubeadm package version
      dpkg_selections:
        name: kubeadm
        selection: hold
      
    - name: Hold kubectl package version
      dpkg_selections:
        name: kubectl
        selection: hold
      
    - name: Create kubelet configuration directory
      file:
        path: /etc/default
        state: directory
        mode: '0755'
      
    - name: Configure kubelet to use systemd cgroup driver
      copy:
        dest: /etc/default/kubelet
        content: |
          KUBELET_EXTRA_ARGS=--cgroup-driver=systemd
        mode: '0644'
      
    - name: Enable kubelet service
      systemd:
        name: kubelet
        daemon_reload: yes
        enabled: yes
      
    - name: Start kubelet service
      systemd:
        name: kubelet
        state: started
      
    - name: Verify Kubernetes components installation
      command: kubeadm version
      register: kubeadm_version
      changed_when: false
      
    - name: Display installed version
      debug:
        msg: "{{ kubeadm_version.stdout }}"
        
    - name: Verify kubectl installation
      command: kubectl version --client
      register: kubectl_version
      changed_when: false
      
    - name: Display kubectl version
      debug:
        msg: "{{ kubectl_version.stdout }}"