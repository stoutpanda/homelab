---
# fix_raspberry_pi_cgroups_improved.yml
- name: Enable memory cgroups on Raspberry Pi nodes for Kubernetes
  hosts: control_plane_nodes
  become: true
  gather_facts: true
  
  tasks:
    - name: Check if running on Raspberry Pi
      assert:
        that:
          - ansible_architecture == "aarch64"
          - "'raspi' in ansible_kernel"
        msg: "This playbook is specifically for Raspberry Pi nodes"
    
    - name: Backup original cmdline.txt with timestamp
      copy:
        src: /boot/firmware/cmdline.txt
        dest: "/boot/firmware/cmdline.txt.backup.{{ ansible_date_time.iso8601_basic_short }}"
        remote_src: yes
      
    - name: Read current cmdline.txt content
      slurp:
        src: /boot/firmware/cmdline.txt
      register: cmdline_content
      
    - name: Parse current boot parameters
      set_fact:
        current_cmdline: "{{ cmdline_content.content | b64decode | trim }}"
        
    - name: Display current boot parameters
      debug:
        msg: "Current cmdline.txt: {{ current_cmdline }}"
    
    - name: Check for existing cgroups parameters
      set_fact:
        has_cgroup_enable: "{{ 'cgroup_enable=memory' in current_cmdline }}"
        has_cgroup_memory: "{{ 'cgroup_memory=1' in current_cmdline }}"
        
    - name: Display cgroups status
      debug:
        msg: 
          - "cgroup_enable=memory present: {{ has_cgroup_enable }}"
          - "cgroup_memory=1 present: {{ has_cgroup_memory }}"
          - "Both parameters present: {{ has_cgroup_enable and has_cgroup_memory }}"
    
    - name: Prepare updated cmdline with cgroups parameters
      set_fact:
        updated_cmdline: >-
          {% set params = current_cmdline.split() %}
          {% if not has_cgroup_enable %}
            {% set _ = params.append('cgroup_enable=memory') %}
          {% endif %}
          {% if not has_cgroup_memory %}
            {% set _ = params.append('cgroup_memory=1') %}
          {% endif %}
          {{ params | join(' ') }}
      when: not (has_cgroup_enable and has_cgroup_memory)
    
    - name: Write updated cmdline.txt
      copy:
        content: "{{ updated_cmdline }}"
        dest: /boot/firmware/cmdline.txt
        mode: '0644'
      when: not (has_cgroup_enable and has_cgroup_memory)
      register: cmdline_updated
    
    - name: Verify updated cmdline.txt content
      slurp:
        src: /boot/firmware/cmdline.txt
      register: verification_content
      when: cmdline_updated.changed
      
    - name: Display updated boot parameters
      debug:
        msg: "Updated cmdline.txt: {{ verification_content.content | b64decode | trim }}"
      when: cmdline_updated.changed
    
    - name: Validate cmdline.txt format
      assert:
        that:
          - "'\n' not in (verification_content.content | b64decode)"
          - "verification_content.content | b64decode | trim | length > 0"
        msg: "cmdline.txt format validation failed - file should be single line"
      when: cmdline_updated.changed
    
    - name: Notify about reboot requirement
      debug:
        msg: |
          REBOOT REQUIRED: Memory cgroups parameters have been added.
          The system will reboot automatically to apply changes.
          After reboot, verify with: cat /proc/cgroups | grep memory
      when: cmdline_updated.changed
    
    - name: Reboot Raspberry Pi nodes to apply cgroups changes
      reboot:
        reboot_timeout: 300
        connect_timeout: 5
        pre_reboot_delay: 5
        post_reboot_delay: 30
        test_command: "systemctl is-system-running --wait"
      when: cmdline_updated.changed
    
    - name: Verify memory cgroups are available after reboot
      shell: cat /proc/cgroups | grep memory
      register: cgroups_verification
      changed_when: false
      failed_when: cgroups_verification.rc != 0
      
    - name: Parse cgroups verification output
      set_fact:
        memory_cgroup_enabled: "{{ cgroups_verification.stdout.split()[3] == '1' if cgroups_verification.stdout else false }}"
      
    - name: Display final verification
      debug:
        msg: 
          - "Memory cgroups output: {{ cgroups_verification.stdout }}"
          - "Memory cgroups enabled: {{ memory_cgroup_enabled }}"
    
    - name: Final validation
      assert:
        that:
          - memory_cgroup_enabled
        success_msg: "‚úÖ Memory cgroups successfully enabled and verified!"
        fail_msg: "‚ùå Memory cgroups still not properly enabled. Check boot parameters and reboot manually."

- name: Remove conflicting cgroup_disable=memory parameter
  hosts: control_plane_nodes
  become: true
  gather_facts: true
  
  tasks:
    - name: Backup current cmdline.txt with conflict timestamp
      copy:
        src: /boot/firmware/cmdline.txt
        dest: "/boot/firmware/cmdline.txt.conflict_fix.{{ ansible_date_time.iso8601_basic_short }}"
        remote_src: yes
      
    - name: Read current cmdline.txt
      slurp:
        src: /boot/firmware/cmdline.txt
      register: current_cmdline
      
    - name: Display current problematic cmdline
      debug:
        msg: 
          - "Current cmdline.txt: {{ current_cmdline.content | b64decode | trim }}"
          - "üö® CONFLICT DETECTED: Both cgroup_disable=memory AND cgroup_enable=memory present!"
    
    - name: Parse and clean conflicting parameters
      set_fact:
        cleaned_params: >-
          {% set params = (current_cmdline.content | b64decode | trim).split() %}
          {% set cleaned = [] %}
          {% for param in params %}
            {% if param != 'cgroup_disable=memory' %}
              {% set _ = cleaned.append(param) %}
            {% endif %}
          {% endfor %}
          {{ cleaned | join(' ') }}
    
    - name: Verify cleaned parameters
      debug:
        msg: 
          - "Cleaned cmdline: {{ cleaned_params }}"
          - "Contains cgroup_disable=memory: {{ 'cgroup_disable=memory' in cleaned_params }}"
          - "Contains cgroup_enable=memory: {{ 'cgroup_enable=memory' in cleaned_params }}"
          - "Contains cgroup_memory=1: {{ 'cgroup_memory=1' in cleaned_params }}"
    
    - name: Write corrected cmdline.txt
      copy:
        content: "{{ cleaned_params }}"
        dest: /boot/firmware/cmdline.txt
        mode: '0644'
      register: cmdline_fixed
    
    - name: Verify the fix
      slurp:
        src: /boot/firmware/cmdline.txt
      register: verification
      when: cmdline_fixed.changed
      
    - name: Display corrected cmdline
      debug:
        msg: "‚úÖ Corrected cmdline.txt: {{ verification.content | b64decode | trim }}"
      when: cmdline_fixed.changed
    
    - name: Validate no conflicts remain
      assert:
        that:
          - "'cgroup_disable=memory' not in (verification.content | b64decode)"
          - "'cgroup_enable=memory' in (verification.content | b64decode)"
          - "'cgroup_memory=1' in (verification.content | b64decode)"
        success_msg: "‚úÖ Conflict resolved! Only cgroup_enable parameters remain."
        fail_msg: "‚ùå Conflict still exists or enable parameters missing."
      when: cmdline_fixed.changed
    
    - name: Reboot to apply the corrected parameters
      reboot:
        reboot_timeout: 300
        connect_timeout: 5
        pre_reboot_delay: 5
        post_reboot_delay: 30
        test_command: "systemctl is-system-running --wait"
      when: cmdline_fixed.changed
    
    - name: Verify memory cgroups are now properly enabled
      shell: cat /proc/cgroups | grep memory
      register: final_cgroup_check
      changed_when: false
      
    - name: Parse final cgroup status
      set_fact:
        memory_cgroups_working: "{{ final_cgroup_check.stdout.split()[3] == '1' }}"
      
    - name: Display final verification
      debug:
        msg:
          - "Final cgroups status: {{ final_cgroup_check.stdout }}"
          - "Memory cgroups enabled: {{ memory_cgroups_working }}"
    
    - name: Final success check
      assert:
        that:
          - memory_cgroups_working
        success_msg: "üéâ SUCCESS! Memory cgroups are now properly enabled and working!"
        fail_msg: "‚ùå Memory cgroups still not working. Manual investigation needed."