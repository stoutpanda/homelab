---
# setup_worker_nodes.yml - Prepare MS-01 nodes to join Kubernetes cluster
- name: Setup Kubernetes worker nodes
  hosts: worker_nodes
  become: true
  gather_facts: true
  
  tasks:
    # Same prerequisites as control plane nodes
    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
        state: present
        update_cache: yes
    
    - name: Disable swap temporarily
      command: swapoff -a
      changed_when: true
    
    - name: Disable swap permanently
      replace:
        path: /etc/fstab
        regexp: '^([^#].*\sswap\s+sw\s+.*)$'
        replace: '# \1'
    
    - name: Create modules configuration for Kubernetes
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter
        mode: '0644'
    
    - name: Load overlay module
      modprobe:
        name: overlay
        state: present
    
    - name: Load br_netfilter module
      modprobe:
        name: br_netfilter
        state: present
    
    - name: Create sysctl configuration for Kubernetes networking
      copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
        mode: '0644'
    
    - name: Apply sysctl configuration
      command: sysctl --system
    
    # Install containerd
    - name: Install containerd
      apt:
        name: containerd
        state: present
        update_cache: yes
    
    - name: Create containerd configuration directory
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'
    
    - name: Generate default containerd configuration
      shell: containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml
    
    - name: Update containerd to use systemd cgroup driver
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'
    
    - name: Restart containerd
      systemd:
        name: containerd
        state: restarted
        daemon_reload: yes
        enabled: yes
    
    # Install Kubernetes components
    - name: Create keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
    
    - name: Download Kubernetes GPG key
      shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    
    - name: Add Kubernetes repository
      apt_repository:
        repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /
        state: present
        filename: kubernetes
    
    - name: Update apt cache after adding repo
      apt:
        update_cache: yes
    
    - name: Install Kubernetes packages
      apt:
        name:
          - kubelet=1.33.1-1.1
          - kubeadm=1.33.1-1.1
          - kubectl=1.33.1-1.1
        state: present
    
    - name: Hold Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl
    
    - name: Configure kubelet for systemd cgroup driver
      copy:
        dest: /etc/default/kubelet
        content: |
          KUBELET_EXTRA_ARGS=--cgroup-driver=systemd
        mode: '0644'
    
    - name: Enable and start kubelet
      systemd:
        name: kubelet
        daemon_reload: yes
        enabled: yes
        state: started
    
    - name: Display completion message
      debug:
        msg: |
          Worker node preparation complete!
          
          Next steps:
          1. Generate join command on admin node:
             kubeadm token create --print-join-command
          
          2. Run the join command on each worker node:
             sudo kubeadm join 10.8.18.2:16443 --token <token> --discovery-token-ca-cert-hash sha256:<hash>
          
          3. Label the nodes from admin node:
             kubectl label node {{ inventory_hostname }} node-role.kubernetes.io/worker$
